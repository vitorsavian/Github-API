// Code generated by mockery v2.14.1. DO NOT EDIT.

package mock

import (
	git "vitorsavian/github-api/internal/adapters/services/git"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetCommitsPerRepository provides a mock function with given fields: urlService, owner, user, project
func (_m *Service) GetCommitsPerRepository(urlService string, owner string, user string, project string) (git.GetCommitsRepositoryResponse, error) {
	ret := _m.Called(urlService, owner, user, project)

	var r0 git.GetCommitsRepositoryResponse
	if rf, ok := ret.Get(0).(func(string, string, string, string) git.GetCommitsRepositoryResponse); ok {
		r0 = rf(urlService, owner, user, project)
	} else {
		r0 = ret.Get(0).(git.GetCommitsRepositoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(urlService, owner, user, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentRepositoriesPushed provides a mock function with given fields: urlService, user
func (_m *Service) GetRecentRepositoriesPushed(urlService string, user string) ([]git.GetRepositoriesResponse, error) {
	ret := _m.Called(urlService, user)

	var r0 []git.GetRepositoriesResponse
	if rf, ok := ret.Get(0).(func(string, string) []git.GetRepositoriesResponse); ok {
		r0 = rf(urlService, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]git.GetRepositoriesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(urlService, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepositoriesAscOrder provides a mock function with given fields: urlService, user
func (_m *Service) GetRepositoriesAscOrder(urlService string, user string) ([]git.GetRepositoriesResponse, error) {
	ret := _m.Called(urlService, user)

	var r0 []git.GetRepositoriesResponse
	if rf, ok := ret.Get(0).(func(string, string) []git.GetRepositoriesResponse); ok {
		r0 = rf(urlService, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]git.GetRepositoriesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(urlService, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
